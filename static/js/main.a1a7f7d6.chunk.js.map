{"version":3,"sources":["Cookie/Components/Header.js","Cookie/Components/List.js","Cookie/Components/Delete.js","Cookie/Components/Create.js","Cookie/Components/Update.js","Cookie/Cookie.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","src","srcSet","alt","width","height","onClick","setRandomCookies","List","Object","keys","allCookies","length","map","cookie","key","removeCookie","Delete","removeAllCookies","Create","htmlFor","name","type","value","cookieName","onChange","handleChange","cookieValue","createCookie","Update","selectValue","inputValue","updateCookie","cookies","Cookies","Cookie","state","getAll","doNotParse","bind","reloadCookieList","event","target","this","setState","froot","set","Math","floor","random","maxAge","remove","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a1a7f7d6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <div>\r\n            <div className=\"header\">\r\n                <img\r\n                    src=\"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/apple/155/cookie_1f36a.png\"\r\n                    srcSet=\"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/apple/155/cookie_1f36a.png 2x\"\r\n                    alt=\"Cookie on Apple iOS 12.1\"\r\n                    width=\"80\"\r\n                    height=\"80\"\r\n                    className=\"App-logo\"\r\n                />\r\n                <h1>CookieCrud</h1>\r\n                <img\r\n                    src=\"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/apple/155/cookie_1f36a.png\"\r\n                    srcSet=\"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/apple/155/cookie_1f36a.png 2x\"\r\n                    alt=\"Cookie on Apple iOS 12.1\"\r\n                    width=\"80\"\r\n                    height=\"80\"\r\n                    className=\"App-logo-bis\"\r\n                />\r\n            </div>\r\n            <button className=\"btn btn-primary\" onClick={props.setRandomCookies}>\r\n                Créer des cookies\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nfunction List(props) {\r\n    return (\r\n        <div className=\"cookies-list\">\r\n            {Object.keys(props.allCookies).length > 0 ?\r\n                <div>\r\n                    <h2>Liste des cookies</h2>\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Nom</th>\r\n                                <th>Valeur</th>\r\n                                <th>Supprimer</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {Object.keys(props.allCookies).map((cookie) =>\r\n                                <tr key={cookie} className=\"cookie-item\">\r\n                                    <td>{cookie}</td>\r\n                                    <td>{props.allCookies[cookie]}</td>\r\n                                    <td>\r\n                                        <button className=\"btn btn-delete\" onClick={() => props.removeCookie(cookie)}>\r\n                                            Remove\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                : \r\n                <h2> Aucun cookies</h2>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List;\r\n","import React from 'react';\r\n\r\nfunction Delete(props) {\r\n    return (\r\n        <div className=\"cookies-remove\">\r\n            <h2>Supprimer tous les cookies</h2>\r\n            <button className=\"btn btn-delete\" onClick={props.removeAllCookies}>\r\n                Supprimer\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Delete;\r\n","import React from 'react';\r\n\r\nfunction Create(props) {\r\n    return (\r\n        <div className=\"cookies-create\">\r\n            <h2>Créer un cookie</h2>\r\n            <label htmlFor=\"cookieName\">Nom</label>\r\n            <input\r\n                name=\"cookieName\"\r\n                type=\"text\"\r\n                value={props.cookieName}\r\n                onChange={props.handleChange}\r\n            />\r\n            <br />\r\n            <label htmlFor=\"cookieValue\">Valeur</label>\r\n            <input\r\n                name=\"cookieValue\"\r\n                type=\"text\"\r\n                value={props.cookieValue}\r\n                onChange={props.handleChange}\r\n            />\r\n            <br />\r\n            <button className=\"btn btn-primary\"onClick={() => props.createCookie(props.cookieName, props.cookieValue)}>\r\n                Créer\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Create;\r\n","import React from 'react';\r\n\r\nfunction Update(props) {\r\n    return (\r\n        <div className=\"cookies-update\">\r\n            <h2>Update de cookie</h2>\r\n            <select name=\"selectValue\" value={props.selectValue} onChange={props.handleChange}>\r\n                {Object.keys(props.allCookies).map((cookie) =>\r\n                    <option key={cookie} value={cookie}>{cookie}</option>\r\n                )}\r\n            </select>\r\n            <input\r\n                type=\"text\"\r\n                value={props.inputValue}\r\n                onChange={props.handleChange}\r\n                name=\"inputValue\"\r\n            />\r\n            <br />\r\n            <button\r\n                className=\"btn btn-update\"\r\n                onClick={() => props.updateCookie(props.selectValue, props.inputValue)}\r\n            >\r\n                Update\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Update;\r\n","import React from 'react';\r\nimport Cookies from 'universal-cookie';\r\nimport Header from './Components/Header';\r\nimport List from './Components/List';\r\nimport Delete from './Components/Delete';\r\nimport Create from './Components/Create';\r\nimport Update from './Components/Update';\r\nimport './Cookie.css'\r\n\r\nconst cookies = new Cookies();\r\n\r\nclass Cookie extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            allCookies: cookies.getAll({ doNotParse: true }),\r\n            inputValue: '',\r\n            selectValue: '',\r\n            cookieValue: '',\r\n            cookieName: '',\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.setRandomCookies = this.setRandomCookies.bind(this);\r\n        this.reloadCookieList = this.reloadCookieList.bind(this);\r\n        this.removeAllCookies = this.removeAllCookies.bind(this);\r\n        this.createCookie = this.createCookie.bind(this);\r\n        this.removeCookie = this.removeCookie.bind(this);\r\n        this.updateCookie = this.updateCookie.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        const target = event.target;\r\n        const value = target.value\r\n        const name = target.name;\r\n\r\n        this.setState({ [name]: value });\r\n    }\r\n\r\n    reloadCookieList() {\r\n        this.setState({ allCookies: cookies.getAll({ doNotParse: false }) });\r\n    }\r\n\r\n    setRandomCookies() {\r\n        const froots = [\r\n            \"fraise\",\r\n            \"framboises\",\r\n            \"citron\",\r\n            \"pomme\",\r\n            \"poires\",\r\n            \"oranges\",\r\n            \"bananes\"\r\n        ];\r\n\r\n        froots.map((froot) => {\r\n            return cookies.set(froot, Math.floor(Math.random() * 10) + 1, { maxAge: 7200 });\r\n        });\r\n\r\n        this.reloadCookieList();\r\n    }\r\n\r\n    removeCookie(cookie) {\r\n        cookies.remove(cookie);\r\n\r\n        this.reloadCookieList();\r\n    }\r\n\r\n    updateCookie(cookie, value) {\r\n        cookies.set(cookie, value);\r\n\r\n        this.reloadCookieList();\r\n\r\n        this.setState({ inputValue: '' })\r\n    }\r\n\r\n    removeAllCookies() {\r\n        for (var cookie in this.state.allCookies) {\r\n            cookies.remove(cookie)\r\n        };\r\n\r\n        this.reloadCookieList();\r\n    }\r\n\r\n    createCookie(cookie, value) {\r\n        cookies.set(cookie, value, { maxAge: 7200 });\r\n\r\n        this.reloadCookieList();\r\n    }\r\n\r\n    render() {\r\n        const { allCookies, cookieName, cookieValue, inputValue, selectValue } = this.state;\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <Header setRandomCookies={this.setRandomCookies} />\r\n                <div className=\"cookies\">\r\n                    <Create\r\n                        handleChange={this.handleChange}\r\n                        createCookie={this.createCookie}\r\n                        cookieName={cookieName}\r\n                        cookieValue={cookieValue}\r\n                    />\r\n                    <List removeCookie={this.removeCookie} allCookies={allCookies} />\r\n                    {Object.keys(allCookies).length > 0 && (\r\n                        <Update\r\n                            selectValue={selectValue}\r\n                            inputValue={inputValue}\r\n                            allCookies={allCookies}\r\n                            handleChange={this.handleChange}\r\n                            updateCookie={this.updateCookie}\r\n                        />\r\n                    )}\r\n                    {Object.keys(allCookies).length > 0 && <Delete removeAllCookies={this.removeAllCookies} />}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Cookie;\r\n","import React from 'react';\r\nimport Cookie from './Cookie/Cookie'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Cookie />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}